{"version":3,"sources":["index.js"],"names":["Square","selectState","_this","props","rows","cols","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","onClick","this","id","className","class","React","Component","Board","squaresArray","x","y","boxState","board","key","push","Game","_this2","Object","C_Users_Greg_Desktop_Programming_2018_Programming2_React_Javascript_Projects_gameoflife5_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_Greg_Desktop_Programming_2018_Programming2_React_Javascript_Projects_gameoflife5_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Greg_Desktop_Programming_2018_Programming2_React_Javascript_Projects_gameoflife5_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","gridCopy","JSON","parse","stringify","state","setState","seed","boardCopy","Math","floor","random","gameLoop","clearInterval","interval","setInterval","playGame","nextBoard","total","generation","pauseGame","clearGame","Array","fill","map","style","font-size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9779f4e9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nclass Square extends React.Component {\n\n    //This function sends a reference of what row/column has been clicked back to the game component.\n    selectState = () => {\n        this.props.selectState(this.props.rows, this.props.cols);\n    }\n\n    render() {\n        return (\n            <div onClick={this.selectState} id={this.props.id} className={this.props.class}>\n\n            </div>\n        );\n    }\n}\n\n\n\n\nclass Board extends React.Component {\n\n    render() {\n        /*\n        Here we loop through every square and assign it with either a\n        'true' or 'false' class. These are then pushed as components to the squares arrray!\n        */\n\n        let squaresArray = [];\n\n        for (let x = 0; x < this.props.rows; x++) {\n            for (let y = 0; y < this.props.cols; y++) {\n\n                let boxState = (this.props.board[x][y]) ? \"square true\" : \"square false\";\n                let key = x + \"-\" + y;\n                squaresArray.push(<Square\n                    rows={x}\n                    cols={y}\n                    class={boxState}\n                    id={key}\n                    key={key}\n                    selectState={this.props.selectState}\n                />)\n            }\n        }\n\n        return (\n            <div className=\"board\">\n                {squaresArray}\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\nclass Game extends React.Component {\n\n    constructor() {\n        super();\n\n        this.rows = 30;\n        this.cols = 50;\n\n        //Create an initial board 50 x 30 containing consisting of boolen values, which will decide a squares color....\n        this.state = {\n            board: Array(this.rows).fill().map(() => Array(this.cols).fill(false)),\n            generation: 0\n        }\n    }\n\n\n\n    selectState = (x, y) => {\n\n        let gridCopy = JSON.parse(JSON.stringify(this.state.board));\n\n        //When a square is clicked it will change the boolean value based upon its existing state...\n        gridCopy[x][y] = !gridCopy[x][y];\n\n        this.setState({\n            board: gridCopy\n        })\n    }\n\n    // Create initial Seed for the board . . .\n    seed = () => {\n\n        //Create copy of 2d Array...\n        let boardCopy = JSON.parse(JSON.stringify(this.state.board));\n\n        for (let x = 0; x < this.rows; x++) {\n            for (let y = 0; y < this.cols; y++) {\n                if (Math.floor(Math.random() * 8) === 1) {\n                    boardCopy[x][y] = true;\n                }\n            }\n        }\n        this.setState({\n            board: boardCopy\n        })\n    }\n\n\n\n    gameLoop = () => {\n        clearInterval(this.interval);\n        this.interval = setInterval(this.playGame, 94);\n    }\n\n\n    playGame = () => {\n\n        let board = this.state.board;\n        let nextBoard = JSON.parse(JSON.stringify(this.state.board));\n\n\n        for (let x = 0; x < this.rows; x++) {\n            for (let y = 0; y < this.cols; y++) {\n\n                let total = 0;\n\n                //Top left \n                if (x > 0 && y > 0) {\n                    if (board[x - 1][y - 1]) {\n                        total++;\n                    }\n                }\n\n\n                //Top Middle\n                if (x > 0) {\n                    if (board[x - 1][y]) {\n                        total++;\n                    }\n                }\n\n\n                //Top Right \n                if (x > 0 && y < this.cols - 1) {\n                    if (board[x - 1][y + 1]) {\n                        total++;\n                    }\n                }\n\n\n                //Middle Left\n                if (y > 0) {\n                    if (board[x][y - 1]) {\n                        total++;\n                    }\n                }\n\n\n                //Middle Right\n                if (y < this.cols - 1) {\n                    if (board[x][y + 1]) {\n                        total++;\n                    }\n                }\n\n\n                //Bottom left \n                if (x < this.rows - 1 && y > 0) {\n                    if (board[x + 1][y - 1]) {\n                        total++;\n                    }\n                }\n\n\n                //Bottom Middle\n                if (x < this.rows - 1) {\n                    if (board[x + 1][y]) {\n                        total++;\n                    }\n                }\n\n\n                //Bottom Right \n                if (x < this.rows - 1 && y < this.cols - 1) {\n                    if (board[x + 1][y + 1]) {\n                        total++;\n                    }\n                }\n\n                /* \n                Rules            \n                1) If a live cell does not have 2 or 3 neighbours it will die...\n                2) If a dead dead has exactly 3 live neighbours it becomes alive...\n                */\n\n                if (board[x][y] && (total < 2 || total > 3)) {\n                    nextBoard[x][y] = false;\n                }\n\n                if (!board[x][y] && (total === 3)) {\n                    nextBoard[x][y] = true;\n                }\n            }\n        }\n\n        this.setState({\n            board: nextBoard,\n            generation: this.state.generation + 1\n        })\n\n\n    }\n\n\n    pauseGame = () => {\n        clearInterval(this.interval);\n    }\n\n\n    clearGame = () => {\n\n        let gridCopy = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n\n        this.setState({\n            board: gridCopy\n        })\n    }\n\n    componentDidMount() {\n        this.seed();\n        this.gameLoop();\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <h1>Game of Life</h1>\n                <h3>Generation: {this.state.generation}</h3>\n                <div className=\"width\">\n                    <hr className=\"hr\" />\n                </div>\n                <div className=\"buttons\">\n                    <button onClick={this.pauseGame} className=\"btn btn1\">Pause</button>\n                    <button onClick={this.clearGame} className=\"btn btn2\">Clear</button>\n                    <button onClick={this.seed} className=\"btn btn3\">Seed</button>\n                </div>\n\n                <div className=\"wrap\">\n                    <Board\n                        rows={this.rows}\n                        cols={this.cols}\n                        board={this.state.board}\n                        selectState={this.selectState}\n                    />\n                </div>\n                <div className=\"play\">\n                    <button onClick={this.gameLoop} className=\"btn btn4\">Play</button>\n                    <p className=\"p\" style={{ \"font-size\": \"1.5em\" }}>Pause and Clear to select your own starting seed!</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n"],"sourceRoot":""}